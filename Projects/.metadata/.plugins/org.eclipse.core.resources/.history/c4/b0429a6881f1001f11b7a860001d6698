package businessLogic;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import data.PositiveNegativeClassifier;
import data.EmotionsClassifier;
import data.Classification;


// This file manages the classifications so we can show the results.
public class AnalysisService {
    private String input;
    private String mode;
    
    //Map is like a zip in python
    private Map<String, Integer> positiveNegativeResults;
    private Map<String, Integer> emotionResults;
    private Map<String, Double> aggregatedEmotionResults;
    
    //Constructor, we need the texto/filePath (input) and the mode to classify the text/file.
    public AnalysisService(String input, String mode) {
        this.input = input;
        this.mode = mode;
        
        //Intialize the maps.
        this.positiveNegativeResults = new HashMap<>();
        this.emotionResults = new HashMap<>();
        this.aggregatedEmotionResults = new HashMap<>();
    }
    
    // analyze function is what we can see in the terminal
    public void analyze() throws IOException {
        if (mode.equals("text")) {
            analyzeText(input);
        } else if (mode.equals("file")) {
            analyzeFile(input);
        }
    }

    private void analyzeText(String text) throws IOException {
    	//This function is executed if the choice was text
    	
        // Pos/Neg classification
        PositiveNegativeClassifier pnClassifier = new PositiveNegativeClassifier(text); //let's create the classifier
        pnClassifier.prediction("single"); //It's with single mode because is just text
        pnClassifier.analyze(); //The analyze function of PosNegClassifier, we'll see it soon
        extractPositiveNegativeResults(pnClassifier.getValues()); // And we apply the extract... function to the values of the pos and negs.

        // Same for emotions classifier
        EmotionsClassifier emotionsClassifier = new EmotionsClassifier(text);
        emotionsClassifier.prediction("single");
        emotionsClassifier.analyze();
        extractEmotionResults(emotionsClassifier.getValues());
    }

    private void analyzeFile(String filePath) throws IOException {
        // Mapas para almacenar los valores acumulados
        Map<String, Integer> emotionSum = new HashMap<>();
        Map<String, Integer> emotionCount = new HashMap<>();
        
        // Positivo/Negativo con modo "file"
        PositiveNegativeClassifier pnClassifier = new PositiveNegativeClassifier(filePath);
        pnClassifier.prediction("file");
        pnClassifier.analyze();
        extractPositiveNegativeResults(pnClassifier.getValues());

        // Emociones: leer línea por línea y calcular promedio
        EmotionsClassifier emotionsClassifier = new EmotionsClassifier(filePath);
        emotionsClassifier.prediction("file");
        emotionsClassifier.analyze();
        
        // Sumar valores para cada emoción y contar cuántas veces aparece
        for (Classification entry : emotionsClassifier.getValues()) {
            String emotion = entry.getName();
            int value = entry.getValue();
            
            emotionSum.put(emotion, emotionSum.getOrDefault(emotion, 0) + value);
            emotionCount.put(emotion, emotionCount.getOrDefault(emotion, 0) + 1);
        }

        // Calcular el promedio por emoción
        for (Map.Entry<String, Integer> entry : emotionSum.entrySet()) {
            String emotion = entry.getKey();
            double average = entry.getValue() / (double) emotionCount.get(emotion);
            aggregatedEmotionResults.put(emotion, average);
        }
    }

    private void extractPositiveNegativeResults(List<Classification> values) {
    	//As we were talking, this function takes the values of the pos/neg classification and maps each value with its respective name
        for (Classification classification : values) { //Take all classifications and map it.
            positiveNegativeResults.put(classification.getName(), classification.getValue()); //Put function to put the labels and values on the map
        }
    }

    private void extractEmotionResults(List<Classification> values) {
    	//Same as the previous
        for (Classification classification : values) {
            emotionResults.put(classification.getName(), classification.getValue());
        }
    }

    public Map<String, Integer> getPositiveNegativeResults() {
        return positiveNegativeResults;
    }

    public Map<String, Integer> getEmotionResults() {
        return emotionResults;
    }

    public Map<String, Double> getAggregatedEmotionResults() {
        return aggregatedEmotionResults;
    }
}
