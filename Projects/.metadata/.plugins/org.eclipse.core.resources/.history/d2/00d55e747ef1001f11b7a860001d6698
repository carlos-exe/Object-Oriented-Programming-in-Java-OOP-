package businessLogic;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import data.PositiveNegativeClassifier;
import data.EmotionsClassifier;
import data.Classification;

public class AnalysisService {
    private String input;
    private String mode;
    private Map<String, Integer> positiveNegativeResults;
    private Map<String, Integer> emotionResults;
    private Map<String, Double> aggregatedEmotionResults;

    public AnalysisService(String input, String mode) {
        this.input = input;
        this.mode = mode;
        this.positiveNegativeResults = new HashMap<>();
        this.emotionResults = new HashMap<>();
        this.aggregatedEmotionResults = new HashMap<>();
    }

    public void analyze() throws IOException {
        if (mode.equals("text")) {
            analyzeText(input);
        } else if (mode.equals("file")) {
            analyzeFile(input);
        }
    }

    private void analyzeText(String text) throws IOException {
        // Clasificaci贸n Positivo/Negativo
        PositiveNegativeClassifier pnClassifier = new PositiveNegativeClassifier(text);
        pnClassifier.prediction("single");
        pnClassifier.analyze();
        extractPositiveNegativeResults(pnClassifier.getValues());

        // Clasificaci贸n de Emociones
        EmotionsClassifier emotionsClassifier = new EmotionsClassifier(text);
        emotionsClassifier.prediction("single");
        emotionsClassifier.analyze();
        extractEmotionResults(emotionsClassifier.getValues());
    }

    private void analyzeFile(String filePath) throws IOException {
        List<String> lines = Files.readAllLines(Paths.get(filePath));

        // Contadores para promediar las emociones
        int lineCount = lines.size();
        Map<String, Integer> emotionSum = new HashMap<>();

        for (String line : lines) {
            // Clasificaci贸n Positivo/Negativo
            PositiveNegativeClassifier pnClassifier = new PositiveNegativeClassifier(line);
            pnClassifier.prediction("single");
            pnClassifier.analyze();
            extractPositiveNegativeResults(pnClassifier.getValues());

            // Clasificaci贸n de Emociones
            EmotionsClassifier emotionsClassifier = new EmotionsClassifier(line);
            emotionsClassifier.prediction("single");
            emotionsClassifier.analyze();

            // Sumar valores para promediar emociones
            for (Classification entry : emotionsClassifier.getValues()) {
                emotionSum.put(entry.getName(), emotionSum.getOrDefault(entry.getName(), 0) + entry.getValue());
            }
        }

        // Calcular promedio de emociones
        for (Map.Entry<String, Integer> entry : emotionSum.entrySet()) {
            aggregatedEmotionResults.put(entry.getKey(), entry.getValue() / (double) lineCount);
        }
    }

    private void extractPositiveNegativeResults(List<Classification> values) {
        for (Classification classification : values) {
            positiveNegativeResults.put(classification.getName(), classification.getValue());
        }
    }

    private void extractEmotionResults(List<Classification> values) {
        for (Classification classification : values) {
            emotionResults.put(classification.getName(), classification.getValue());
        }
    }

    public Map<String, Integer> getPositiveNegativeResults() {
        return positiveNegativeResults;
    }

    public Map<String, Integer> getEmotionResults() {
        return emotionResults;
    }

    public Map<String, Double> getAggregatedEmotionResults() {
        return aggregatedEmotionResults;
    }
}
