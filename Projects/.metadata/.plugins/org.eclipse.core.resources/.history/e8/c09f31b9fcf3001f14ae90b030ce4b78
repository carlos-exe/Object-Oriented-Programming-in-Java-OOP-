package ui;

import javafx.application.Application;
import javafx.stage.Stage;
import javafx.stage.FileChooser;
import javafx.scene.Scene;
import javafx.scene.layout.VBox;
import javafx.scene.layout.HBox;
import javafx.scene.layout.BorderPane;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.Button;
import javafx.scene.control.ProgressIndicator;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.PieChart;
import javafx.scene.chart.XYChart;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import businessLogic.AnalysisService;
import java.io.File;
import java.io.IOException;
import java.util.Map;

public class MainFX4 extends Application {

    private TextArea inputArea;
    private TextArea outputArea;
    private AnalysisService service; // To store the current analysis service instance
    private Button showBarChartButton; // Button for bar chart
    private Button showPieChartButton; // Button for pie chart
    private ProgressIndicator progressIndicator; // Loading indicator

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("FeeLens🔍");

        // --- SECCIÓN LATERAL (TÍTULO Y BOTÓN DE SALIDA) ---
        VBox sideMenu = new VBox(20);
        sideMenu.setAlignment(Pos.CENTER);
        sideMenu.setPadding(new Insets(20));
        sideMenu.setStyle("-fx-background-color: #1E88E5;");

        Label title = new Label("FeeLens 🔍");
        title.setFont(Font.font(24));
        title.setTextFill(Color.WHITE);

        Label subtitle = new Label("Emociones detrás de las palabras");
        subtitle.setFont(Font.font(14));
        subtitle.setTextFill(Color.WHITE);
        subtitle.setWrapText(true);
        subtitle.setAlignment(Pos.CENTER);

        Button exitButton = new Button("Salir");
        exitButton.getStyleClass().add("menu-button");
        exitButton.setOnAction(e -> primaryStage.close());

        sideMenu.getChildren().addAll(title, subtitle, exitButton);

        // --- SECCIÓN PRINCIPAL ---
        VBox mainContent = new VBox(15);
        mainContent.setPadding(new Insets(20));
        mainContent.setStyle("-fx-background-color: linear-gradient(to bottom,#D4EAF7, #A9D6F2, #7EC8E3);");

        Label inputLabel = new Label("Ingrese texto o seleccione un archivo:");
        inputLabel.getStyleClass().add("title-label");

        inputArea = new TextArea();
        inputArea.setPromptText("Escriba el texto aquí o seleccione un archivo...");
        inputArea.getStyleClass().add("text-area-custom");

        // --- BOTONES DE ANÁLISIS ---
        Button classifyTextButton = new Button("Analizar Texto");
        classifyTextButton.getStyleClass().add("custom-button");
        classifyTextButton.setOnAction(e -> classifyText());

        Button classifyFileButton = new Button("Analizar Archivo");
        classifyFileButton.getStyleClass().add("custom-button");
        classifyFileButton.setOnAction(e -> classifyFile(primaryStage));

        HBox buttonBox = new HBox(15, classifyTextButton, classifyFileButton);
        buttonBox.setAlignment(Pos.CENTER);

        // --- BOTONES DE VISUALIZACIÓN ---
        showBarChartButton = new Button("Ver Gráfico de Barras");
        showBarChartButton.getStyleClass().add("custom-button");
        showBarChartButton.setOnAction(e -> showBarChart());
        showBarChartButton.setDisable(true); // Disable initially

        showPieChartButton = new Button("Ver Gráfico de Torta");
        showPieChartButton.getStyleClass().add("custom-button");
        showPieChartButton.setOnAction(e -> showPieChart());
        showPieChartButton.setDisable(true); // Disable initially

        HBox chartButtons = new HBox(15, showBarChartButton, showPieChartButton);
        chartButtons.setAlignment(Pos.CENTER);

        // --- ÁREA DE RESULTADOS ---
        outputArea = new TextArea();
        outputArea.setEditable(false);
        outputArea.setPromptText("Aquí se mostrarán los resultados...");
        outputArea.getStyleClass().add("text-area-custom");
        outputArea.setPrefHeight(300); // Increased height for more information

        // --- LOADING INDICATOR ---
        progressIndicator = new ProgressIndicator();
        progressIndicator.setVisible(false); // Hide initially
        Label loadingLabel = new Label("Analizando...");
        loadingLabel.setVisible(false); // Hide initially

        HBox loadingBox = new HBox(10, progressIndicator, loadingLabel);
        loadingBox.setAlignment(Pos.CENTER);

        // --- CONTACT INFORMATION ---
        Label contactInfo = new Label("contacto: cordonez@unal.edu.co & sescarraga@unal.edu.co");
        contactInfo.setFont(Font.font(12));
        contactInfo.setTextFill(Color.GRAY);
        contactInfo.setPadding(new Insets(10, 0, 0, 0));

        // --- LAYOUT PRINCIPAL ---
        mainContent.getChildren().addAll(inputLabel, inputArea, buttonBox, outputArea, loadingBox, chartButtons, contactInfo);

        BorderPane root = new BorderPane();
        root.setLeft(sideMenu);
        root.setCenter(mainContent);

        Scene scene = new Scene(root, 1000, 700); // Increased window size
        scene.getStylesheets().add(getClass().getResource("style.css").toExternalForm());

        primaryStage.setScene(scene);
        primaryStage.show();
    }

    // Método para clasificar el texto ingresado
    private void classifyText() {
        String input = inputArea.getText();
        if (input.isEmpty()) {
            showErrorAlert("Error", "Campo de texto vacío", "Por favor, ingrese texto para analizar.");
            return;
        }

        // Show loading indicator
        progressIndicator.setVisible(true);
        outputArea.setText("Analizando...");

        // Disable buttons during analysis
        setButtonsDisabled(true);

        // Run analysis in a separate thread to avoid freezing the UI
        new Thread(() -> {
            service = new AnalysisService(input, "text");
            try {
                service.analyze();
                javafx.application.Platform.runLater(() -> {
                    displayResults(input);
                    enableChartButtons(); // Enable chart buttons after successful analysis
                });
            } catch (IOException e) {
                javafx.application.Platform.runLater(() -> {
                    outputArea.setText("Error al analizar el texto: " + e.getMessage());
                    e.printStackTrace();
                });
            } finally {
                javafx.application.Platform.runLater(() -> {
                    progressIndicator.setVisible(false); // Hide loading indicator
                    setButtonsDisabled(false); // Re-enable buttons
                });
            }
        }).start();
    }

    // Método para clasificar el archivo de texto seleccionado
    private void classifyFile(Stage stage) {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Selecciona el archivo de texto");
        fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("Archivos de texto", "*.txt"));
        File selectedFile = fileChooser.showOpenDialog(stage);

        if (selectedFile == null) {
            showErrorAlert("Error", "Archivo no seleccionado", "Por favor, seleccione un archivo de texto.");
            return;
        }
        String filePath = selectedFile.getAbsolutePath();

        // Show loading indicator
        progressIndicator.setVisible(true);
        outputArea.setText("Analizando...");

        // Disable buttons during analysis
        setButtonsDisabled(true);

        // Run analysis in a separate thread to avoid freezing the UI
        new Thread(() -> {
            service = new AnalysisService(filePath, "file");
            try {
                service.analyze();
                javafx.application.Platform.runLater(() -> {
                    displayResults(filePath);
                    enableChartButtons(); // Enable chart buttons after successful analysis
                });
            } catch (IOException e) {
                javafx.application.Platform.runLater(() -> {
                    outputArea.setText("Error al analizar el archivo: " + e.getMessage());
                    e.printStackTrace();
                });
            } finally {
                javafx.application.Platform.runLater(() -> {
                    progressIndicator.setVisible(false); // Hide loading indicator
                    setButtonsDisabled(false); // Re-enable buttons
                });
            }
        }).start();
    }

    // Método para mostrar los resultados en el área de texto
    private void displayResults(String input) {
        StringBuilder result = new StringBuilder();
        result.append("Entrada: ").append(input).append("\n\n");

        // Mostrar resultados de Sentimiento Positivo/Negativo
        result.append("📊 Sentimiento Positivo/Negativo:\n");
        for (Map.Entry<String, Integer> entry : service.getPositiveNegativeResults().entrySet()) {
            result.append(entry.getKey()).append(": ").append(entry.getValue()).append("\n");
        }
        result.append("\n😊 Clasificación de Emociones:\n");
        if (service.getMode().equals("text")) {
            for (Map.Entry<String, Integer> entry : service.getEmotionResults().entrySet()) {
                result.append(entry.getKey()).append(": ").append(entry.getValue()).append("\n");
            }
        } else {
            for (Map.Entry<String, Double> entry : service.getAggregatedEmotionResults().entrySet()) {
                result.append(entry.getKey()).append(": ").append(entry.getValue()).append("\n");
            }
        }
        outputArea.setText(result.toString());
    }

    // Método para habilitar los botones de gráficos
    private void enableChartButtons() {
        showBarChartButton.setDisable(false);
        showPieChartButton.setDisable(false);
    }

    // Método para deshabilitar o habilitar los botones
    private void setButtonsDisabled(boolean disabled) {
        showBarChartButton.setDisable(disabled);
        showPieChartButton.setDisable(disabled);
    }

    // Método para mostrar el gráfico de barras
    private void showBarChart() {
        if (service == null) {
            showErrorAlert("Error", "Sin datos", "No hay datos de emociones para mostrar.");
            return;
        }

        Stage chartStage = new Stage();
        chartStage.setTitle("Diagrama de Barras - Emociones");

        // Layout for the chart window
        BorderPane chartRoot = new BorderPane();
        chartRoot.setStyle("-fx-background-color: linear-gradient(to bottom,#D4EAF7, #A9D6F2, #7EC8E3);");

        CategoryAxis xAxis = new CategoryAxis();
        NumberAxis yAxis = new NumberAxis();
        BarChart<String, Number> barChart = new BarChart<>(xAxis, yAxis);
        barChart.setTitle("Distribución de Emociones");

        XYChart.Series<String, Number> series = new XYChart.Series<>();
        if (service.getMode().equals("text")) {
            for (Map.Entry<String, Integer> entry : service.getEmotionResults().entrySet()) {
                series.getData().add(new XYChart.Data<>(entry.getKey(), entry.getValue()));
            }
        } else {
            for (Map.Entry<String, Double> entry : service.getAggregatedEmotionResults().entrySet()) {
                series.getData().add(new XYChart.Data<>(entry.getKey(), entry.getValue()));
            }
        }
        barChart.getData().add(series);

        // Customize bar colors
        for (XYChart.Data<String, Number> data : series.getData()) {
            data.getNode().setStyle("-fx-bar-fill: " + getColorForEmotion(data.getXValue()) + ";");
        }

        chartRoot.setCenter(barChart);
        Scene chartScene = new Scene(chartRoot, 800, 600);
        chartScene.getStylesheets().add(getClass().getResource("style.css").toExternalForm());
        chartStage.setScene(chartScene);
        chartStage.show();
    }

    // Método para mostrar el gráfico de pie
    private void showPieChart() {
        if (service == null) {
            showErrorAlert("Error", "Sin datos", "No hay datos de emociones para mostrar.");
            return;
        }

        Stage chartStage = new Stage();
        chartStage.setTitle("Diagrama de Torta - Emociones");

        // Layout for the chart window
        BorderPane chartRoot = new BorderPane();
        chartRoot.setStyle("-fx-background-color: linear-gradient(to bottom,#D4EAF7, #A9D6F2, #7EC8E3);");

        PieChart pieChart = new PieChart();
        pieChart.setTitle("Distribución de Emociones");

        if (service.getMode().equals("text")) {
            for (Map.Entry<String, Integer> entry : service.getEmotionResults().entrySet()) {
                pieChart.getData().add(new PieChart.Data(entry.getKey(), entry.getValue()));
            }
        } else {
            for (Map.Entry<String, Double> entry : service.getAggregatedEmotionResults().entrySet()) {
                pieChart.getData().add(new PieChart.Data(entry.getKey(), entry.getValue()));
            }
        }

        chartRoot.setCenter(pieChart);
        Scene chartScene = new Scene(chartRoot, 800, 600);
        chartScene.getStylesheets().add(getClass().getResource("style.css").toExternalForm());
        chartStage.setScene(chartScene);
        chartStage.show();
    }

    // Método para obtener colores personalizados para las emociones
    private String getColorForEmotion(String emotion) {
        switch (emotion.toLowerCase()) {
            case "feliz":
                return "#FFC300"; // Amarillo
            case "triste":
                return "#3498DB"; // Azul
            case "enojado":
                return "#E74C3C"; // Rojo
            case "sorprendido":
                return "#9B59B6"; // Morado
            default:
                return "#2ECC71"; // Verde (default)
        }
    }

    // Método para mostrar una alerta de error
    private void showErrorAlert(String title, String header, String content) {
        Alert alert = new Alert(AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(header);
        alert.setContentText(content);
        alert.showAndWait();
    }

    public static void main(String[] args) {
        launch(args);
    }
}